//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Settings/Controlls/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Player_1"",
            ""id"": ""282a7281-e76d-4cf2-a815-ede83bec459e"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fc395064-6e0a-4c31-a3dd-2af49dbeffd9"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""ccf52e3f-d7d3-4760-bf8a-e546ce2e1bec"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""387d0194-7c63-49bf-8055-fee1af8d617c"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""eee77ef5-1c4b-4a7b-b600-50ff82c03d75"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""819753f4-a9f0-423a-9213-d26b4c7c5c6c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""982d20e2-cf0f-4100-bd83-37c69edd44b2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c5d61f7-c3ac-4440-8851-c5872cf70ab5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb5e28f1-7204-4000-a10e-0220a35d50f2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_2"",
            ""id"": ""d09b3d1c-7b36-429b-b56d-86e429191d07"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a7ca8919-da6b-4e04-8831-62147df3c0c8"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""5fcd398f-3962-423a-b8c9-06be33809d47"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""adb6b3d6-0a85-4923-9333-3e1e484086be"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""e29170e3-1df7-4016-86ab-4241191c1341"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2895cdf9-e19d-4486-95b2-de867f379263"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71f3c8a3-6569-4804-adef-d2b3969c8b95"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d4acda-f634-4501-afbf-17cc5218ade4"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1beeb7c9-72ea-4503-a752-e86e78d83eff"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_3"",
            ""id"": ""79ae9a4c-048a-4554-96b0-f28ec534ae18"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0224e2fc-8bba-4f21-bb86-813342f67159"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=2,max=2)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""c517c9eb-be06-45d2-85f6-3d5beb2a1112"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=2,max=2)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""794ec878-5f57-4287-9933-3a7c68d4a1bc"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=2,max=2)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""b89ec26b-3a25-4d3b-a1f6-26f0c8c865ac"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=2,max=2)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f63db61-fd64-417f-8ef9-37c92e75e430"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87431cf5-8204-4755-b7be-17f147abcf0f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f26c251-2943-4b78-b5cc-44897d96671e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc939dd8-dfe9-4740-95b2-ab302f7e80a9"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChangeInput"",
            ""id"": ""dda2290f-15c0-4568-adaa-c7b33eead8e9"",
            ""actions"": [
                {
                    ""name"": ""SetInput_1"",
                    ""type"": ""Value"",
                    ""id"": ""239e346f-d9c9-47f1-9633-c45dfbedda58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetInput_2"",
                    ""type"": ""Value"",
                    ""id"": ""d2b4f03a-6d88-400a-b11f-448d692b0e1f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetInput_3"",
                    ""type"": ""Value"",
                    ""id"": ""5cf0ea1f-bb3b-45ea-b47e-42e373d2f2e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02c9f358-ea53-4c13-b6c4-39a19e4523f8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""SetInput_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""792ce273-ae96-489e-9cb7-16e758b44946"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""SetInput_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbaa5c98-7a67-4b80-8163-09c4bcce3c60"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""SetInput_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_1
        m_Player_1 = asset.FindActionMap("Player_1", throwIfNotFound: true);
        m_Player_1_Jump = m_Player_1.FindAction("Jump", throwIfNotFound: true);
        m_Player_1_Left = m_Player_1.FindAction("Left", throwIfNotFound: true);
        m_Player_1_Right = m_Player_1.FindAction("Right", throwIfNotFound: true);
        m_Player_1_Special = m_Player_1.FindAction("Special", throwIfNotFound: true);
        // Player_2
        m_Player_2 = asset.FindActionMap("Player_2", throwIfNotFound: true);
        m_Player_2_Jump = m_Player_2.FindAction("Jump", throwIfNotFound: true);
        m_Player_2_Left = m_Player_2.FindAction("Left", throwIfNotFound: true);
        m_Player_2_Right = m_Player_2.FindAction("Right", throwIfNotFound: true);
        m_Player_2_Special = m_Player_2.FindAction("Special", throwIfNotFound: true);
        // Player_3
        m_Player_3 = asset.FindActionMap("Player_3", throwIfNotFound: true);
        m_Player_3_Jump = m_Player_3.FindAction("Jump", throwIfNotFound: true);
        m_Player_3_Left = m_Player_3.FindAction("Left", throwIfNotFound: true);
        m_Player_3_Right = m_Player_3.FindAction("Right", throwIfNotFound: true);
        m_Player_3_Special = m_Player_3.FindAction("Special", throwIfNotFound: true);
        // ChangeInput
        m_ChangeInput = asset.FindActionMap("ChangeInput", throwIfNotFound: true);
        m_ChangeInput_SetInput_1 = m_ChangeInput.FindAction("SetInput_1", throwIfNotFound: true);
        m_ChangeInput_SetInput_2 = m_ChangeInput.FindAction("SetInput_2", throwIfNotFound: true);
        m_ChangeInput_SetInput_3 = m_ChangeInput.FindAction("SetInput_3", throwIfNotFound: true);
    }

    ~@UserInput()
    {
        UnityEngine.Debug.Assert(!m_Player_1.enabled, "This will cause a leak and performance issues, UserInput.Player_1.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player_2.enabled, "This will cause a leak and performance issues, UserInput.Player_2.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player_3.enabled, "This will cause a leak and performance issues, UserInput.Player_3.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ChangeInput.enabled, "This will cause a leak and performance issues, UserInput.ChangeInput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_1
    private readonly InputActionMap m_Player_1;
    private List<IPlayer_1Actions> m_Player_1ActionsCallbackInterfaces = new List<IPlayer_1Actions>();
    private readonly InputAction m_Player_1_Jump;
    private readonly InputAction m_Player_1_Left;
    private readonly InputAction m_Player_1_Right;
    private readonly InputAction m_Player_1_Special;
    public struct Player_1Actions
    {
        private @UserInput m_Wrapper;
        public Player_1Actions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_1_Jump;
        public InputAction @Left => m_Wrapper.m_Player_1_Left;
        public InputAction @Right => m_Wrapper.m_Player_1_Right;
        public InputAction @Special => m_Wrapper.m_Player_1_Special;
        public InputActionMap Get() { return m_Wrapper.m_Player_1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player_1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_1ActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Special.started += instance.OnSpecial;
            @Special.performed += instance.OnSpecial;
            @Special.canceled += instance.OnSpecial;
        }

        private void UnregisterCallbacks(IPlayer_1Actions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Special.started -= instance.OnSpecial;
            @Special.performed -= instance.OnSpecial;
            @Special.canceled -= instance.OnSpecial;
        }

        public void RemoveCallbacks(IPlayer_1Actions instance)
        {
            if (m_Wrapper.m_Player_1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player_1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_1Actions @Player_1 => new Player_1Actions(this);

    // Player_2
    private readonly InputActionMap m_Player_2;
    private List<IPlayer_2Actions> m_Player_2ActionsCallbackInterfaces = new List<IPlayer_2Actions>();
    private readonly InputAction m_Player_2_Jump;
    private readonly InputAction m_Player_2_Left;
    private readonly InputAction m_Player_2_Right;
    private readonly InputAction m_Player_2_Special;
    public struct Player_2Actions
    {
        private @UserInput m_Wrapper;
        public Player_2Actions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_2_Jump;
        public InputAction @Left => m_Wrapper.m_Player_2_Left;
        public InputAction @Right => m_Wrapper.m_Player_2_Right;
        public InputAction @Special => m_Wrapper.m_Player_2_Special;
        public InputActionMap Get() { return m_Wrapper.m_Player_2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_2Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player_2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_2ActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Special.started += instance.OnSpecial;
            @Special.performed += instance.OnSpecial;
            @Special.canceled += instance.OnSpecial;
        }

        private void UnregisterCallbacks(IPlayer_2Actions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Special.started -= instance.OnSpecial;
            @Special.performed -= instance.OnSpecial;
            @Special.canceled -= instance.OnSpecial;
        }

        public void RemoveCallbacks(IPlayer_2Actions instance)
        {
            if (m_Wrapper.m_Player_2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player_2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_2Actions @Player_2 => new Player_2Actions(this);

    // Player_3
    private readonly InputActionMap m_Player_3;
    private List<IPlayer_3Actions> m_Player_3ActionsCallbackInterfaces = new List<IPlayer_3Actions>();
    private readonly InputAction m_Player_3_Jump;
    private readonly InputAction m_Player_3_Left;
    private readonly InputAction m_Player_3_Right;
    private readonly InputAction m_Player_3_Special;
    public struct Player_3Actions
    {
        private @UserInput m_Wrapper;
        public Player_3Actions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_3_Jump;
        public InputAction @Left => m_Wrapper.m_Player_3_Left;
        public InputAction @Right => m_Wrapper.m_Player_3_Right;
        public InputAction @Special => m_Wrapper.m_Player_3_Special;
        public InputActionMap Get() { return m_Wrapper.m_Player_3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_3Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_3Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player_3ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_3ActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Special.started += instance.OnSpecial;
            @Special.performed += instance.OnSpecial;
            @Special.canceled += instance.OnSpecial;
        }

        private void UnregisterCallbacks(IPlayer_3Actions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Special.started -= instance.OnSpecial;
            @Special.performed -= instance.OnSpecial;
            @Special.canceled -= instance.OnSpecial;
        }

        public void RemoveCallbacks(IPlayer_3Actions instance)
        {
            if (m_Wrapper.m_Player_3ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_3Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player_3ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_3ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_3Actions @Player_3 => new Player_3Actions(this);

    // ChangeInput
    private readonly InputActionMap m_ChangeInput;
    private List<IChangeInputActions> m_ChangeInputActionsCallbackInterfaces = new List<IChangeInputActions>();
    private readonly InputAction m_ChangeInput_SetInput_1;
    private readonly InputAction m_ChangeInput_SetInput_2;
    private readonly InputAction m_ChangeInput_SetInput_3;
    public struct ChangeInputActions
    {
        private @UserInput m_Wrapper;
        public ChangeInputActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SetInput_1 => m_Wrapper.m_ChangeInput_SetInput_1;
        public InputAction @SetInput_2 => m_Wrapper.m_ChangeInput_SetInput_2;
        public InputAction @SetInput_3 => m_Wrapper.m_ChangeInput_SetInput_3;
        public InputActionMap Get() { return m_Wrapper.m_ChangeInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChangeInputActions set) { return set.Get(); }
        public void AddCallbacks(IChangeInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ChangeInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChangeInputActionsCallbackInterfaces.Add(instance);
            @SetInput_1.started += instance.OnSetInput_1;
            @SetInput_1.performed += instance.OnSetInput_1;
            @SetInput_1.canceled += instance.OnSetInput_1;
            @SetInput_2.started += instance.OnSetInput_2;
            @SetInput_2.performed += instance.OnSetInput_2;
            @SetInput_2.canceled += instance.OnSetInput_2;
            @SetInput_3.started += instance.OnSetInput_3;
            @SetInput_3.performed += instance.OnSetInput_3;
            @SetInput_3.canceled += instance.OnSetInput_3;
        }

        private void UnregisterCallbacks(IChangeInputActions instance)
        {
            @SetInput_1.started -= instance.OnSetInput_1;
            @SetInput_1.performed -= instance.OnSetInput_1;
            @SetInput_1.canceled -= instance.OnSetInput_1;
            @SetInput_2.started -= instance.OnSetInput_2;
            @SetInput_2.performed -= instance.OnSetInput_2;
            @SetInput_2.canceled -= instance.OnSetInput_2;
            @SetInput_3.started -= instance.OnSetInput_3;
            @SetInput_3.performed -= instance.OnSetInput_3;
            @SetInput_3.canceled -= instance.OnSetInput_3;
        }

        public void RemoveCallbacks(IChangeInputActions instance)
        {
            if (m_Wrapper.m_ChangeInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChangeInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ChangeInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChangeInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChangeInputActions @ChangeInput => new ChangeInputActions(this);
    public interface IPlayer_1Actions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
    }
    public interface IPlayer_2Actions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
    }
    public interface IPlayer_3Actions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
    }
    public interface IChangeInputActions
    {
        void OnSetInput_1(InputAction.CallbackContext context);
        void OnSetInput_2(InputAction.CallbackContext context);
        void OnSetInput_3(InputAction.CallbackContext context);
    }
}
